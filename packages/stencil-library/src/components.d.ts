/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { sizes } from "./utils/types";
export { sizes } from "./utils/types";
export namespace Components {
    interface AnmivinAlert {
        "alertcolor"?: string;
        "alerttitle": string;
        "isopen": boolean;
    }
    interface AnmivinButton {
        "buttoncolor"?: string;
        "size"?: sizes;
        "type"?: string;
        "variant"?: 'pressed' | 'flat';
    }
    interface AnmivinCheckbox {
        "checkboxcolor"?: string;
        "checked": boolean;
        "formlabel"?: string;
        "label": string;
    }
    interface AnmivinContextmenu {
        "isopen": boolean;
        "menuitems": string | Array<{ title: string; action: () => void | string }>;
        "modalcolor"?: string;
    }
    interface AnmivinFormwrapper {
        "buttoncolor"?: string;
    }
    interface AnmivinIcon {
        "fill"?: string;
        "path": string;
        "size"?: number;
        "stroke"?: string;
    }
    interface AnmivinMenuitem {
        "text": string;
    }
    interface AnmivinModal {
        "buttons": string;
        "cancelText": string;
        "confirmText": string;
        "isopen": boolean;
        "modalcolor"?: string;
        "modaltitle": string;
    }
    interface AnmivinText {
        "color": string;
        "variant": 'title' | 'subtitle' | 'body';
    }
    interface AnmivinTextfield {
        "fieldcolor"?: string;
        "formlabel"?: string;
        "label": string;
        "size"?: sizes;
        "value": string;
    }
    interface AnmivinTooltip {
        "arrow": boolean;
        "position": 'top' | 'right' | 'bottom' | 'left';
        "text": string;
    }
}
export interface AnmivinAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinAlertElement;
}
export interface AnmivinCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinCheckboxElement;
}
export interface AnmivinFormwrapperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinFormwrapperElement;
}
export interface AnmivinMenuitemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinMenuitemElement;
}
export interface AnmivinModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinModalElement;
}
export interface AnmivinTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAnmivinTextfieldElement;
}
declare global {
    interface HTMLAnmivinAlertElementEventMap {
        "closAlert": any;
    }
    interface HTMLAnmivinAlertElement extends Components.AnmivinAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinAlertElementEventMap>(type: K, listener: (this: HTMLAnmivinAlertElement, ev: AnmivinAlertCustomEvent<HTMLAnmivinAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinAlertElementEventMap>(type: K, listener: (this: HTMLAnmivinAlertElement, ev: AnmivinAlertCustomEvent<HTMLAnmivinAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinAlertElement: {
        prototype: HTMLAnmivinAlertElement;
        new (): HTMLAnmivinAlertElement;
    };
    interface HTMLAnmivinButtonElement extends Components.AnmivinButton, HTMLStencilElement {
    }
    var HTMLAnmivinButtonElement: {
        prototype: HTMLAnmivinButtonElement;
        new (): HTMLAnmivinButtonElement;
    };
    interface HTMLAnmivinCheckboxElementEventMap {
        "inputValueChange": { value: boolean; label: string };
    }
    interface HTMLAnmivinCheckboxElement extends Components.AnmivinCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinCheckboxElementEventMap>(type: K, listener: (this: HTMLAnmivinCheckboxElement, ev: AnmivinCheckboxCustomEvent<HTMLAnmivinCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinCheckboxElementEventMap>(type: K, listener: (this: HTMLAnmivinCheckboxElement, ev: AnmivinCheckboxCustomEvent<HTMLAnmivinCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinCheckboxElement: {
        prototype: HTMLAnmivinCheckboxElement;
        new (): HTMLAnmivinCheckboxElement;
    };
    interface HTMLAnmivinContextmenuElement extends Components.AnmivinContextmenu, HTMLStencilElement {
    }
    var HTMLAnmivinContextmenuElement: {
        prototype: HTMLAnmivinContextmenuElement;
        new (): HTMLAnmivinContextmenuElement;
    };
    interface HTMLAnmivinFormwrapperElementEventMap {
        "submitForm": any;
    }
    interface HTMLAnmivinFormwrapperElement extends Components.AnmivinFormwrapper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinFormwrapperElementEventMap>(type: K, listener: (this: HTMLAnmivinFormwrapperElement, ev: AnmivinFormwrapperCustomEvent<HTMLAnmivinFormwrapperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinFormwrapperElementEventMap>(type: K, listener: (this: HTMLAnmivinFormwrapperElement, ev: AnmivinFormwrapperCustomEvent<HTMLAnmivinFormwrapperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinFormwrapperElement: {
        prototype: HTMLAnmivinFormwrapperElement;
        new (): HTMLAnmivinFormwrapperElement;
    };
    interface HTMLAnmivinIconElement extends Components.AnmivinIcon, HTMLStencilElement {
    }
    var HTMLAnmivinIconElement: {
        prototype: HTMLAnmivinIconElement;
        new (): HTMLAnmivinIconElement;
    };
    interface HTMLAnmivinMenuitemElementEventMap {
        "action": any;
    }
    interface HTMLAnmivinMenuitemElement extends Components.AnmivinMenuitem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinMenuitemElementEventMap>(type: K, listener: (this: HTMLAnmivinMenuitemElement, ev: AnmivinMenuitemCustomEvent<HTMLAnmivinMenuitemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinMenuitemElementEventMap>(type: K, listener: (this: HTMLAnmivinMenuitemElement, ev: AnmivinMenuitemCustomEvent<HTMLAnmivinMenuitemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinMenuitemElement: {
        prototype: HTMLAnmivinMenuitemElement;
        new (): HTMLAnmivinMenuitemElement;
    };
    interface HTMLAnmivinModalElementEventMap {
        "submitModal": any;
        "closeModal": any;
    }
    interface HTMLAnmivinModalElement extends Components.AnmivinModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinModalElementEventMap>(type: K, listener: (this: HTMLAnmivinModalElement, ev: AnmivinModalCustomEvent<HTMLAnmivinModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinModalElementEventMap>(type: K, listener: (this: HTMLAnmivinModalElement, ev: AnmivinModalCustomEvent<HTMLAnmivinModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinModalElement: {
        prototype: HTMLAnmivinModalElement;
        new (): HTMLAnmivinModalElement;
    };
    interface HTMLAnmivinTextElement extends Components.AnmivinText, HTMLStencilElement {
    }
    var HTMLAnmivinTextElement: {
        prototype: HTMLAnmivinTextElement;
        new (): HTMLAnmivinTextElement;
    };
    interface HTMLAnmivinTextfieldElementEventMap {
        "inputValueChange": { value: string; label: string };
    }
    interface HTMLAnmivinTextfieldElement extends Components.AnmivinTextfield, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAnmivinTextfieldElementEventMap>(type: K, listener: (this: HTMLAnmivinTextfieldElement, ev: AnmivinTextfieldCustomEvent<HTMLAnmivinTextfieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAnmivinTextfieldElementEventMap>(type: K, listener: (this: HTMLAnmivinTextfieldElement, ev: AnmivinTextfieldCustomEvent<HTMLAnmivinTextfieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAnmivinTextfieldElement: {
        prototype: HTMLAnmivinTextfieldElement;
        new (): HTMLAnmivinTextfieldElement;
    };
    interface HTMLAnmivinTooltipElement extends Components.AnmivinTooltip, HTMLStencilElement {
    }
    var HTMLAnmivinTooltipElement: {
        prototype: HTMLAnmivinTooltipElement;
        new (): HTMLAnmivinTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "anmivin-alert": HTMLAnmivinAlertElement;
        "anmivin-button": HTMLAnmivinButtonElement;
        "anmivin-checkbox": HTMLAnmivinCheckboxElement;
        "anmivin-contextmenu": HTMLAnmivinContextmenuElement;
        "anmivin-formwrapper": HTMLAnmivinFormwrapperElement;
        "anmivin-icon": HTMLAnmivinIconElement;
        "anmivin-menuitem": HTMLAnmivinMenuitemElement;
        "anmivin-modal": HTMLAnmivinModalElement;
        "anmivin-text": HTMLAnmivinTextElement;
        "anmivin-textfield": HTMLAnmivinTextfieldElement;
        "anmivin-tooltip": HTMLAnmivinTooltipElement;
    }
}
declare namespace LocalJSX {
    interface AnmivinAlert {
        "alertcolor"?: string;
        "alerttitle"?: string;
        "isopen"?: boolean;
        "onClosAlert"?: (event: AnmivinAlertCustomEvent<any>) => void;
    }
    interface AnmivinButton {
        "buttoncolor"?: string;
        "size"?: sizes;
        "type"?: string;
        "variant"?: 'pressed' | 'flat';
    }
    interface AnmivinCheckbox {
        "checkboxcolor"?: string;
        "checked"?: boolean;
        "formlabel"?: string;
        "label"?: string;
        "onInputValueChange"?: (event: AnmivinCheckboxCustomEvent<{ value: boolean; label: string }>) => void;
    }
    interface AnmivinContextmenu {
        "isopen"?: boolean;
        "menuitems"?: string | Array<{ title: string; action: () => void | string }>;
        "modalcolor"?: string;
    }
    interface AnmivinFormwrapper {
        "buttoncolor"?: string;
        "onSubmitForm"?: (event: AnmivinFormwrapperCustomEvent<any>) => void;
    }
    interface AnmivinIcon {
        "fill"?: string;
        "path"?: string;
        "size"?: number;
        "stroke"?: string;
    }
    interface AnmivinMenuitem {
        "onAction"?: (event: AnmivinMenuitemCustomEvent<any>) => void;
        "text"?: string;
    }
    interface AnmivinModal {
        "buttons"?: string;
        "cancelText"?: string;
        "confirmText"?: string;
        "isopen"?: boolean;
        "modalcolor"?: string;
        "modaltitle"?: string;
        "onCloseModal"?: (event: AnmivinModalCustomEvent<any>) => void;
        "onSubmitModal"?: (event: AnmivinModalCustomEvent<any>) => void;
    }
    interface AnmivinText {
        "color"?: string;
        "variant"?: 'title' | 'subtitle' | 'body';
    }
    interface AnmivinTextfield {
        "fieldcolor"?: string;
        "formlabel"?: string;
        "label"?: string;
        "onInputValueChange"?: (event: AnmivinTextfieldCustomEvent<{ value: string; label: string }>) => void;
        "size"?: sizes;
        "value"?: string;
    }
    interface AnmivinTooltip {
        "arrow"?: boolean;
        "position"?: 'top' | 'right' | 'bottom' | 'left';
        "text"?: string;
    }
    interface IntrinsicElements {
        "anmivin-alert": AnmivinAlert;
        "anmivin-button": AnmivinButton;
        "anmivin-checkbox": AnmivinCheckbox;
        "anmivin-contextmenu": AnmivinContextmenu;
        "anmivin-formwrapper": AnmivinFormwrapper;
        "anmivin-icon": AnmivinIcon;
        "anmivin-menuitem": AnmivinMenuitem;
        "anmivin-modal": AnmivinModal;
        "anmivin-text": AnmivinText;
        "anmivin-textfield": AnmivinTextfield;
        "anmivin-tooltip": AnmivinTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "anmivin-alert": LocalJSX.AnmivinAlert & JSXBase.HTMLAttributes<HTMLAnmivinAlertElement>;
            "anmivin-button": LocalJSX.AnmivinButton & JSXBase.HTMLAttributes<HTMLAnmivinButtonElement>;
            "anmivin-checkbox": LocalJSX.AnmivinCheckbox & JSXBase.HTMLAttributes<HTMLAnmivinCheckboxElement>;
            "anmivin-contextmenu": LocalJSX.AnmivinContextmenu & JSXBase.HTMLAttributes<HTMLAnmivinContextmenuElement>;
            "anmivin-formwrapper": LocalJSX.AnmivinFormwrapper & JSXBase.HTMLAttributes<HTMLAnmivinFormwrapperElement>;
            "anmivin-icon": LocalJSX.AnmivinIcon & JSXBase.HTMLAttributes<HTMLAnmivinIconElement>;
            "anmivin-menuitem": LocalJSX.AnmivinMenuitem & JSXBase.HTMLAttributes<HTMLAnmivinMenuitemElement>;
            "anmivin-modal": LocalJSX.AnmivinModal & JSXBase.HTMLAttributes<HTMLAnmivinModalElement>;
            "anmivin-text": LocalJSX.AnmivinText & JSXBase.HTMLAttributes<HTMLAnmivinTextElement>;
            "anmivin-textfield": LocalJSX.AnmivinTextfield & JSXBase.HTMLAttributes<HTMLAnmivinTextfieldElement>;
            "anmivin-tooltip": LocalJSX.AnmivinTooltip & JSXBase.HTMLAttributes<HTMLAnmivinTooltipElement>;
        }
    }
}
